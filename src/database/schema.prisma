generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id        Int           @id @default(autoincrement())
  accountId String        @unique
  name      String
  status    AccountStatus
  campaigns Campaign[]
  scores    AccountScore[]

  @@map("Account")
}

model Campaign {
  id        BigInt    @id
  name      String
  accountId Int
  status    Status
  account   Account @relation(fields: [accountId], references: [id])
  adGroups  AdGroup[]
  scores    CampaignScore[]

  @@map("Campaign")
}

model AdGroup {
  id         BigInt    @id
  name       String
  campaignId BigInt
  status     Status
  campaign   Campaign  @relation(fields: [campaignId], references: [id])
  keywords   Keyword[]
  scores     AdGroupScore[]

  @@map("AdGroup")
}

model Keyword {
  id          Int      @id @default(autoincrement())
  criterionId BigInt
  keyword     String
  status      Status
  adGroupId   BigInt
  adGroup     AdGroup  @relation(fields: [adGroupId], references: [id])
  scores      KeywordScore[]

  @@unique([criterionId, adGroupId])
  @@map("Keyword")
}

model KeywordScore {
  id        Int      @id @default(autoincrement())
  keywordId Int
  date      DateTime @db.Date
  qs        Int
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@unique([keywordId, date])
  @@index([date])
  @@map("KeywordScore")
}

model AdGroupScore {
  id            Int      @id @default(autoincrement())
  adGroupId     BigInt
  date          DateTime @db.Date
  qs            Float
  keywordCount  Int
  adGroup       AdGroup  @relation(fields: [adGroupId], references: [id], onDelete: Cascade)

  @@unique([adGroupId, date])
  @@index([date])
  @@map("AdGroupScore")
}

model CampaignScore {
  id            Int       @id @default(autoincrement())
  campaignId    BigInt
  date          DateTime  @db.Date
  qs            Float
  adGroupCount  Int
  campaign      Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([date])
  @@map("CampaignScore")
}

model AccountScore {
  id            Int      @id @default(autoincrement())
  accountId     Int
  date          DateTime @db.Date
  qs            Float
  campaignCount Int
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([date])
  @@map("AccountScore")
}

model GlobalScore {
  id            Int      @id @default(autoincrement())
  date          DateTime @db.Date @unique
  qs            Float
  accountCount  Int

  @@map("GlobalScore")
}

enum AccountStatus {
  ENABLED
  CANCELLED
  SUSPENDED
  UNKNOWN
}

enum Status {
  ENABLED
  PAUSED
  REMOVED
  UNKNOWN
}
